<div
  class="open-menu-button-wrapper fixed top-0 left-0 z-[800] w-full pointer-events-none"
>
  <div
    class="container flex justify-end px-2 py-4 md:py-6 lg:py-8 2xl:py-10 md:px-3 lg:px-4 xl:px-6"
  >
    <button
      class="flex flex-col items-center justify-center gap-2 text-2xl text-white transition-all duration-300 ease-in-out scale-0 rounded-full pointer-events-auto open-menu-button xl:text-3xl hover:bg-secondary-700 bg-secondary-600 h-14 w-14 xl:h-20 xl:w-20"
    >
      <div class="w-8 h-0.5 bg-white"></div>
      <div class="w-8 h-0.5 bg-white"></div>
    </button>
  </div>
</div>

<script>
  const scaleOpenMenuButtonOnScroll = () => {
    const openMenuButton = document.querySelector(
      ".open-menu-button"
    ) as HTMLButtonElement;
    const menu = document.querySelector(".menu") as HTMLDivElement;

    let lastScrollTop = 0;
    const scrollThreshold = window.innerHeight * 0.3;

    const updateButtonScale = (scaleUp: boolean) => {
      if (scaleUp) {
        openMenuButton.classList.add("scale-100");
      } else {
        openMenuButton.classList.remove("scale-100");
      }
    };

    const handlePageLoad = () => {
      const scrolledPastThreshold = window.scrollY > scrollThreshold;
      sessionStorage.setItem(
        "scrolledPastThreshold",
        scrolledPastThreshold.toString()
      );
      updateButtonScale(scrolledPastThreshold);
    };

    const handleScroll = () => {
      const currentScrollTop = window.scrollY;
      const menuIsOpen = menu.getAttribute("data-open") === "true";

      if (menuIsOpen) {
        return; // Do nothing if the menu is open
      }

      const scrolledPastThreshold =
        currentScrollTop > lastScrollTop && currentScrollTop > scrollThreshold;
      sessionStorage.setItem(
        "scrolledPastThreshold",
        scrolledPastThreshold.toString()
      );
      updateButtonScale(scrolledPastThreshold);

      lastScrollTop = currentScrollTop <= 0 ? 0 : currentScrollTop;
    };

    window.addEventListener("scroll", handleScroll);
    window.addEventListener("load", handlePageLoad);

    // MutationObserver for 'data-open' attribute changes of the menu
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (
          mutation.type === "attributes" &&
          mutation.attributeName === "data-open"
        ) {
          const isOpen = menu.getAttribute("data-open") === "true";
          if (!isOpen) {
            // Update scale based on scroll position when menu is closed
            const scrolledPastThreshold = window.scrollY > scrollThreshold;
            updateButtonScale(scrolledPastThreshold);
          } else {
            // Always scale down when menu is open
            openMenuButton.classList.remove("scale-100");
          }
        }
      });
    });

    observer.observe(menu, {
      attributes: true,
    });
  };

  document.addEventListener("astro:page-load", scaleOpenMenuButtonOnScroll);
</script>
