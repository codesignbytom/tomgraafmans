---
import Navigation from "../molecules/Navigation.astro";
import Logo from "../atoms/Logo.astro";
import MySocialLink from "../atoms/MySocialLink.astro";
import OpenMenuButton from "../atoms/OpenMenuButton.astro";

const { colorMode = "dark" } = Astro.props;
---

<header class="py-4 md:py-5">
  <div class="container flex items-center justify-between">
    <Logo />
    <div
      class="menu fixed top-0 z-[900] w-full h-full max-w-xl py-4 leading-none text-black transition-all duration-500 ease-in-out bg-white -left-full"
    >
      <div class="container flex flex-col justify-between h-full gap-12 py-28">
        <div class="flex flex-col gap-12">
          <div class="flex items-center justify-between gap-4">
            <div class="w-full pb-3 border-b border-black text-caption--xs">
              Navigation
            </div>
            <button
              class="close-menu-button absolute flex items-center justify-center text-2xl text-white transition-[transform, colors] duration-500 ease-in-out scale-0 rounded-full top-6 right-6 bg-primary-600 h-14 w-14 hover:bg-primary-700"
            >
              <i class="ph ph-x"></i>
            </button>
          </div>
          <Navigation header={true} />
        </div>
        <div class="flex flex-col gap-6">
          <div class="w-full pb-3 border-b border-black text-caption--xs">
            My socials
          </div>
          <div class="flex flex-wrap items-center gap-6">
            <MySocialLink platform="linkedin" username="tomgraafmans" />
            <MySocialLink platform="dribbble" username="varvino" />
            <MySocialLink platform="behance" username="tomgraafmans" />
            <MySocialLink platform="github" username="xarxino" />
            <MySocialLink
              platformDisplayName="Read.cv"
              platform="read"
              platformDomain="cv"
              platformIcon="read-cv"
              username="tomgraafmans"
            />
          </div>
        </div>
      </div>
    </div>

    <div class="flex gap-8">
      <div class="hidden md:block">
        <Navigation orientation="horizontal" />
      </div>

      <button
        class=`open-menu-text text-caption--sm hover:text-primary-600 transition-all duration-300 before:duration-300 relative flex items-center justify-center before:absolute before:-left-4 before:w-1.5 before:h-1.5 before:rounded-full before:top-50% hover:before:bg-primary-600 ${colorMode === "dark" ? "before:bg-white" : "before:bg-black"} md:hidden`
      >
        Menu
      </button>
    </div>

    <div
      class="menu-overlay fixed z-[850] transition-all duration-500 ease-in-out opacity-0 bg-black/50"
    >
    </div>
  </div>
  <OpenMenuButton />
</header>

<script>
  function openMenu(
    menu: any,
    openMenuButton: any,
    closeMenuButton: any,
    menuOverlay: any
  ) {
    menu.setAttribute("data-open", "true");
    openMenuButton.classList.remove("scale-100");
    menuOverlay.classList.toggle("inset-0");
    menuOverlay.classList.toggle("opacity-0");
    menuOverlay.classList.toggle("opacity-100");
    setTimeout(() => {
      menu.classList.toggle("-left-full");
      menu.classList.toggle("left-0");
      menu.setAttribute("data-open", "true");
    }, 300);
    setTimeout(() => {
      closeMenuButton.classList.toggle("scale-0");
    }, 400);
  }

  function closeMenu(
    menu: any,
    openMenuButton: any,
    closeMenuButton: any,
    menuOverlay: any
  ) {
    menu.setAttribute("data-open", "false");
    openMenuButton.classList.add("scale-100");
    closeMenuButton.classList.toggle("scale-0");
    menu.classList.toggle("-left-full");
    menu.classList.toggle("left-0");
    menu.setAttribute("data-open", "false");
    setTimeout(() => {
      menuOverlay.classList.toggle("opacity-100");
      menuOverlay.classList.toggle("opacity-0");
      setTimeout(() => {
        menuOverlay.classList.toggle("inset-0");
      }, 500);
    }, 300);
  }

  function init() {
    // Re-query DOM elements
    const menu = document.querySelector(".menu") as HTMLDivElement;
    const openMenuButton = document.querySelector(
      ".open-menu-button"
    ) as HTMLButtonElement;
    const openMenuText = document.querySelector(
      ".open-menu-text"
    ) as HTMLButtonElement;
    const closeMenuButton = document.querySelector(
      ".close-menu-button"
    ) as HTMLButtonElement;
    const menuOverlay = document.querySelector(
      ".menu-overlay"
    ) as HTMLDivElement;

    // Add event listeners using the new references
    openMenuText.addEventListener("click", () =>
      openMenu(menu, openMenuButton, closeMenuButton, menuOverlay)
    );
    openMenuButton.addEventListener("click", () =>
      openMenu(menu, openMenuButton, closeMenuButton, menuOverlay)
    );
    closeMenuButton.addEventListener("click", () =>
      closeMenu(menu, openMenuButton, closeMenuButton, menuOverlay)
    );
    menuOverlay.addEventListener("click", () =>
      closeMenu(menu, openMenuButton, closeMenuButton, menuOverlay)
    );

    document.addEventListener("keydown", (event) => {
      if (event.keyCode === 27) {
        closeMenu(menu, openMenuButton, closeMenuButton, menuOverlay);
      }
    });
  }

  document.addEventListener("astro:page-load", init);
</script>
